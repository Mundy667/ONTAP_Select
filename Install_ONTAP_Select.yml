--- # Install single node OTS
- hosts: localhost
  connection: local
  gather_facts: no

#############################################################################
#NNNNNNNNNNNNNNNN     Author:  David Hepler
#NNNNNNNNNNNNNNNN     Info:   I made the decision to have 1 playbook 
#NNNNNN    NNNNNN     for each ONTAP Select cluster size to keep it simple. 
#NNNNNN    NNNNNN     
#NNNNNN    NNNNNN     In the longterm it would be best to make an 
#NNNNNN    NNNNNN     ansible module for the installation.
##############################################################################
############ ------------------Pre-requisites --------- ###########
# 
# - This playbook is for installations on ESX hosts tied to a vCenter Server 
# - The vCenter Server needs to have already been added to the Credentials Manager in Deploy
# - If you want to use a license, it needs to have already been added to the  license manager in Deploy
# 
##############################################################################
############ ------------------OTS Return Codes --------- ############
# 200 	OK 	Indicates success for calls that do not create a new object.
# 201 	Created 	An object is successfully created; the location response header includes the unqiue identifer for the object.
# 202 	Accepted 	A long-running job has been started to perform the request, but the operation has not completed.
# 400 	Bad Request 	The request input is not recognized, malformed, or is otherwise not appropriate.
# 403 	Forbidden 	Access is denied due to an authorization error.
# 404 	Not Found 	The resource referred to in the request does not exist.
# 405 	Method Not Allowed 	The HTTP verb in the request is not supported for the resource.
# 409 	Conflict 	An attempt to create an object failed because the object already exists.
# 500 	Internal Error 	Indication of a general, non-specific internal error.
##############################################################################
############ ------------------VARS --------- ############
  vars:
# ----- Deploy Specific -----
    otd_user: "admin"
    otd_password: "Netapp01!"
    deploy_rest_api_url: "https://10.65.56.175/api/v3"
# ----- Cluster Specific -----
    new_cluster_node_num: "1"
    new_cluster_name: "select-1nc"
    ontap_version: "9.4"
    new_cluster_gateway: "10.65.59.1"
    new_cluster_ip: "10.65.59.164"
    new_cluster_netmask: "255.255.255.0"
    ntp_servers:
      - "10.65.56.5"
    domain_names:
      - "muccbc.hq.netapp.com"
    dns_ips:
      - "10.65.56.5"
      - "10.65.56.6"
    ots_password: "Netapp01!"
    mgmt_net: "ONTAP_Management"
    data_net: "ONTAP_UNTAGGED"
    int_net:  "ONTAP_Internal_Network"

# ----- Node Specific -----
    instance_type: "small"
    node_ips:
      - "10.65.59.165"
    license: 
      - ""
      - ""     
    storagepool_capacity:
      - 600000
    storagepool_name:
      - "esx_vc_sdot_linux_ds_01"
#    storagepool_name:
#      - "cbc-sdot-03-local-ds"
#      - "cbc-sdot-04-local-ds"

# ----- vCenter Specific -----
    vcenter_server: "cbc-vc-sdot.muccbc.hq.netapp.com"
# ----- Host Specific -----
    host_names: 
      - "cbc-sdot-03.muccbc.hq.netapp.com"
#      hypervisortype: "ESX"
# --extra-vars='{"host_names": [1,2,3]}'

############ ------------------TASKS --------- ############

  tasks:

#  - name: Debug host name list
#    debug: var="host_names[{{ item }}]"
#    with_sequence: start=0 count="{{ new_cluster_node_num|int }}" 
#
#  - name: Debug storagepool_name list
#    debug: var="storagepool_name[{{ item }}]"
#    with_sequence: start=0 count="{{ new_cluster_node_num|int }}" 
#
  - name: Debug storagepool_capacity list
    debug: var="storagepool_capacity[{{ item }}]"
    with_sequence: start=0 count="{{ new_cluster_node_num|int }}" 

#
#  - name: Debug node_ips list
#    debug: var="node_ips[{{ item }}]"
#    with_sequence: start=0 count="{{ new_cluster_node_num|int }}" 

  - name: Check if Cluster already exists
    uri:
      url: "{{ deploy_rest_api_url }}/clusters?name={{ new_cluster_name }}"
      method: GET
      headers:
        Content-Type: "application/json"
      body_format: json
      user: "{{ otd_user }}"
      password: "{{ otd_password }}"
      status_code: 200
      validate_certs: False 
    register: check_cluster_response

  - debug: var=check_cluster_response

  - debug: var=check_cluster_response.json.num_records

#----------------------------------
  - block:
      - name: "End playbook if cluster already exists"
        debug:
          msg: "Cluster already exists, ending playbook"

      - meta: end_play
    when: check_cluster_response.json.num_records != 0
#----------------------------------
  - name: create Cluster
    uri:
      url: "{{ deploy_rest_api_url }}/clusters?node_count={{ new_cluster_node_num }}"
      method: POST
      headers:
        Content-Type: "application/json"
      body: 
        name: "{{ new_cluster_name }}"
        ontap_image_version: "{{ ontap_version }}"
        gateway: "{{ new_cluster_gateway }}"
        ip: "{{ new_cluster_ip }}"
        netmask: "{{ new_cluster_netmask }}"
        ntp_servers: "{{ ntp_servers }}"
        dns_info:
          dns_ips: "{{ dns_ips }}"
          domains: "{{ domain_names }}"
      body_format: json
      user: "{{ otd_user }}"
      password: "{{ otd_password }}"
      status_code: 201
      validate_certs: False 
    register: cluster_create_response

  - debug: var=cluster_create_response

  - name: Get New Cluster Info
    uri:
      url: "{{ deploy_rest_api_url }}/clusters"
      method: GET
      headers:
        Content-Type: "application/json"
      body_format: json
      user: "{{ otd_user }}"
      password: "{{ otd_password }}"
      status_code: 200
      validate_certs: False 
    register: cluster_get_response

  - debug: msg="{{ cluster_get_response.json.records }}"

  - set_fact:
      cluster_id: "{{ item.id }}"
    with_items: "{{ cluster_get_response.json.records }}"
    when:  item.name  == new_cluster_name

  - debug: var=cluster_id

#----------------------------------------------------------
# Host Registration
#----------------------------------------------------------

#----------------------------------

  - name: Register new Host
    uri:
      url: "{{ deploy_rest_api_url }}/hosts"
      method: POST
      headers:
        Content-Type: "application/json"
      body: '{"hosts": [{"hypervisor_type": "ESX","management_server":"{{ vcenter_server }}", "name": "{{ item }}"}]}'
      body_format: json
      user: "{{ otd_user }}"
      password: "{{ otd_password }}"
      status_code: 202,400
      validate_certs: False
    register: host_register_response
    with_items: "{{ host_names }}" 
#   when: host_ids is undefined   

  - debug: var=host_register_response

  - name: Get Host IDs
    uri:
      url: "{{ deploy_rest_api_url }}/hosts?invalidate_cache=true"
      method: GET
      headers:
        Content-Type: "application/json"
      body_format: json
      user: "{{ otd_user }}"
      password: "{{ otd_password }}"
      status_code: 200
      validate_certs: False 
    register: check_hosts

  - debug: var=check_hosts

  - debug: msg="{{ check_hosts.json.records }}"

  - set_fact:
      host_ids: "{{ host_ids|default([]) + [ {'name': item.0, 'id': item.1.id} ] }}"
    register: host_id_results
    when:  item.1.name  == item.0 
    with_nested: 
      - "{{ host_names }}"
      - "{{ check_hosts.json.records }}"

  - name: Print host_ids
    debug: var=host_ids


#----------------------------------------------------------
  - name: Get a list of nodes with their ids
    uri:
      url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes"
      method: GET
      headers:
        Content-Type: "application/json"
      body_format: json
      user: "{{ otd_user }}"
      password: "{{ otd_password }}"
      status_code: 200
      validate_certs: False 
    register: get_nodes

  - debug: var=get_nodes
  - debug: msg="{{ get_nodes.json.records }}"

  - set_fact:
      node_ids: "{{ node_ids|default([]) + [ {'name': item.name, 'id': item.id} ] }}"
    register: node_id_results
    with_items: "{{ get_nodes.json.records }}"

  - name: Debug host ids
    debug: var="host_ids[{{ item }}].id"
    with_sequence: start=0 count="{{ new_cluster_node_num|int }}" 

  - name: Debug
    debug: var="node_ids[{{ item }}].id"
    with_sequence: start=0 count="{{ new_cluster_node_num|int }}" 

#  - meta: end_play

#-----------------------------------------------------------------------------------------
#-----------Patch Nodes-----------------------

  - block:
      - name: Patch Node 1
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[0].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            instance_type: "{{ instance_type }}"
            host:
              id: "{{ host_ids[0].id }}"
            ip: "{{ node_ips[0] }}"
            passthrough_disks: false
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_response_node_1

      - debug: var=patch_node_response_node_1

    when: node_ids[0] is defined

  - block:
      - name: Patch Node 2
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[1].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            instance_type: "{{ instance_type }}"
            host:
              id: "{{ host_ids[1].id }}"            
            ip: "{{ node_ips[1] }}"
            passthrough_disks: false
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_response_node_2

      - debug: var=patch_node_response_node_2

    when: node_ids[1] is defined and (node_ids | length > 1)

  - block:
      - name: Patch Node 3
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[2].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            instance_type: "{{ instance_type }}"
            host:
              id: "{{ host_ids[2].id }}"
            ip: "{{ node_ips[2] }}"
            passthrough_disks: false
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_response_node_3

      - debug: var=patch_node_response_node_3

    when: node_ids[2] is defined and (node_ids | length > 2)

  - block:
      - name: Patch Node 4
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[3].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            instance_type: "{{ instance_type }}"
            host:
              id: "{{ host_ids[3].id }}"
            ip: "{{ node_ips[3] }}"
            passthrough_disks: false
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_response_node_4

      - debug: var=patch_node_response_node_4

    when: node_ids[3] is defined and (node_ids | length > 3)

#-----------------------------------------------------------------------------------------
#------------NETWORKING Node 1------------------------------------------------------------
  - block:

      - name: Get Node 1 Network IDs
        uri:
          url: "{{ deploy_rest_api_url }}//clusters/{{ cluster_id }}/nodes/{{ node_ids[0].id }}/networks"
          method: GET
          headers:
            Content-Type: "application/json"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: check_networking1

      - debug: var=check_networking1

      - name: Node 1 MGMT Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[0].id }}/networks/{{ check_networking1.json.records[0].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ mgmt_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_1_mgmt_network
        when: check_networking1.json.records[0].id is defined
#      - debug: var=patch_node_1_mgmt_network
      - name: Node 1 DATA Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[0].id }}/networks/{{ check_networking1.json.records[1].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ data_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_1_data_network
        when: check_networking1.json.records[1].id is defined

      - name: Node 1 Internal Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[0].id }}/networks/{{ check_networking1.json.records[2].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ int_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_1_data_network
        when: (node_ids | length > 1 and check_networking1.json.records[2].id is defined) 

    when: node_ids[0] is defined
#-------------------------------------
#------------NETWORKING Node 2----------------------------------------------------------------
  - block:

      - name: Get Node 2 Network IDs
        uri:
          url: "{{ deploy_rest_api_url }}//clusters/{{ cluster_id }}/nodes/{{ node_ids[1].id }}/networks"
          method: GET
          headers:
            Content-Type: "application/json"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: check_networking2

      - debug: var=check_networking2

      - name: Node 2 MGMT Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[1].id }}/networks/{{ check_networking2.json.records[0].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ mgmt_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_2_mgmt_network
        when: check_networking2.json.records[0].id is defined

      - name: Node 2 DATA Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[1].id }}/networks/{{ check_networking2.json.records[1].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ data_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_2_data_network
        when: check_networking2.json.records[1].id is defined

      - name: Node 2 Internal Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[1].id }}/networks/{{ check_networking2.json.records[2].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ int_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_2_data_network
        when: check_networking2.json.records[2].id is defined

    when: node_ids[1] is defined and (node_ids | length > 1)

#-------------------------------------
#------------NETWORKING Node 3------------------------------------------------------------
  - block:

      - name: Get Node 3 Network IDs
        uri:
          url: "{{ deploy_rest_api_url }}//clusters/{{ cluster_id }}/nodes/{{ node_ids[2].id }}/networks"
          method: GET
          headers:
            Content-Type: "application/json"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: check_networking3

      - debug: var=check_networking3

      - name: Node 3 MGMT Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[2].id }}/networks/{{ check_networking3.json.records[0].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ mgmt_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_3_mgmt_network
        when: check_networking3.json.records[0].id is defined

      - name: Node 3 DATA Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[2].id }}/networks/{{ check_networking3.json.records[1].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ data_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_3_data_network
        when: check_networking3.json.records[1].id is defined

      - name: Node 3 Internal Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[2].id }}/networks/{{ check_networking3.json.records[2].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ int_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_3_data_network
        when: check_networking3.json.records[2].id is defined

    when: node_ids[2] is defined and (node_ids | length > 2)

#-------------------------------------
#------------NETWORKING Node 4------------------------------------------------------------
  - block:

      - name: Get Node 4 Network IDs
        uri:
          url: "{{ deploy_rest_api_url }}//clusters/{{ cluster_id }}/nodes/{{ node_ids[3].id }}/networks"
          method: GET
          headers:
            Content-Type: "application/json"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: check_networking4

      - debug: var=check_networking4

      - name: Node 4 MGMT Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[3].id }}/networks/{{ check_networking4.json.records[0].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ mgmt_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_4_mgmt_network
        when: check_networking4.json.records[0].id is defined

      - name: Node 4 DATA Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[3].id }}/networks/{{ check_networking4.json.records[1].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ data_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_4_data_network
        when: check_networking4.json.records[1].id is defined

      - name: Node 4 Internal Network
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[3].id }}/networks/{{ check_networking4.json.records[2].id }}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          body:
            name: "{{ int_net }}"
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 200
          validate_certs: False 
        register: patch_node_4_data_network
        when: check_networking4.json.records[2].id is defined

    when: node_ids[3] is defined and (node_ids | length > 3)

#-----------------------------------------------------------------------------------------
#-----------Attach Storage Pools-----------------------

  - block:

      - name: Attach Storage Pool to node 1
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[0].id }}/storage/pools"
          method: POST
          headers:
            Content-Type: "application/json"
          body: '{"pool_array": [{"capacity": {{ storagepool_capacity[0]|int }},"name": "{{ storagepool_name[0] }}" }]}'
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 201,202
          validate_certs: False 
        register: attach_storage_node_1

      - debug: var=attach_storage_node_1

    when: node_ids[0] is defined

  - block:
      - name: Attach Storage Pool to node 2
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[1].id }}/storage/pools"
          method: POST
          headers:
            Content-Type: "application/json"
          body: '{"pool_array": [{"capacity": {{ storagepool_capacity[1]|int }},"name": "{{ storagepool_name[1] }}" }]}'
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 201,202
          validate_certs: False 
        register: attach_storage_node_2

      - debug: var=attach_storage_node_2

    when: node_ids[1] is defined and (node_ids | length > 1)

  - block:
      - name: Attach Storage Pool to node 3
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[2].id }}/storage/pools"
          method: POST
          headers:
            Content-Type: "application/json"
          body: '{"pool_array": [{"capacity": {{ storagepool_capacity[2]|int }},"name": "{{ storagepool_name[2] }}" }]}'
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 201,202
          validate_certs: False 
        register: attach_storage_node_3

      - debug: var=attach_storage_node_3

    when: node_ids[2] is defined and (node_ids | length > 2)

  - block:
      - name: Attach Storage Pool to node 4
        uri:
          url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/nodes/{{ node_ids[3].id }}/storage/pools"
          method: POST
          headers:
            Content-Type: "application/json"
          body: '{"pool_array": [{"capacity": {{ storagepool_capacity[3]|int }},"name": "{{ storagepool_name[3] }}" }]}'
          body_format: json
          user: "{{ otd_user }}"
          password: "{{ otd_password }}"
          status_code: 201,202
          validate_certs: False 
        register: attach_storage_node_4

      - debug: var=attach_storage_node_4

    when: node_ids[3] is defined and (node_ids | length > 3)

#-----------------------------------------------------------------------------------------

  - name: Start Cluster Deployment
    uri:
      url: "{{ deploy_rest_api_url }}/clusters/{{ cluster_id }}/deploy?inhibit_rollback=false"
      method: POST
      headers:
        Content-Type: "application/json"
      body: 
        ontap_credential:
          password: "{{ ots_password }}"
      body_format: json
      user: "{{ otd_user }}"
      password: "{{ otd_password }}"
      status_code: 202
      validate_certs: False 
    register: cluster_deploy_response

##---------This section should be used-------------------------
## to wait on the cluster to be installed. If there is an error,
## return the error message, otherwise end playbook 
#  - block:
#      - name: ""
#        debug:
#          msg: ""
#
#      - meta: end_play
#    when: check_cluster_response.json.num_records != 0
##----------------------------------
